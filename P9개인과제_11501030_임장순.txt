자료구조 P9 과제 (2) 정보보호학과 11501030임장순

2번 HashTable 자료구조의 구현

[소스코드]
public class P9_2 {
	interface LinearProbing<K,V>{
	    void Put(K key,V data);
		V Get(K key);
		void Print();
		V Delete(int index);
	}
	
	interface Chaining<K, V>{
		void put(K key,V data);
		V get(K key);
		void print();
		V delete(K key);
	}
	
	public static class HashTable<K, V> implements LinearProbing<K,V>,Chaining<K,V> {
		private int M = 13;  // 테이블 크기
		private K[] a = null; // 해시테이블
		private V[] d = null; // key관련 데이터 저장
		private Node[] node = null; // 해시 테이블
		HashTable() {
			a = (K[]) new Object[M];
			d = (V[]) new Object[M];
			node = new Node[M];
		}
		
		public static class Node {  // Node 클래스
		          private Object key;
		          private Object data;
		          private Node   next;
		          public Node(Object newkey, Object newdata, Node ref){  // 생성자
		       	   key  = newkey;
		       	   data = newdata;
		       	   next = ref;
		          }
		          public Object getKey()  { return key; }
		          public Object getData() { return data;}
		          public void setNext(Node next) {
		        	  this.next=next;
		          }
		    }

		
		private int hash(K key){ // 해시코드
			return (key.hashCode() & 0x7fffffff) % M;  // 나눗셈 함수
		}
		public void Print() {
			for(int i=0;i<M;++i) System.out.printf("\t%2d",i);
			System.out.println();
			for(int i=0;i<M;++i) System.out.print("\t"+a[i]);
			System.out.println();
			for(int i=0;i<M;++i) System.out.print("\t"+d[i]);
			System.out.println();
		}
		public void print() {
			for(int i=0;i<M;++i) {
		   		 System.out.print(String.format(" %2d", i));
		   		 Node x =node[i];
		   		 while (x != null){
		   			 System.out.print("-->["+x.getKey()+", "+x.getData()+"]");
		   			 x = x.next;
		   			 if(x==null) {
		   				System.out.println(); 
		   			 }
		   		 }
		   	 }
		}
		public void Put(K key, V data) {  // 삽입 연산
			int initialpos = hash(key);    // 초기 위치 
			int i = initialpos, j = 2;
			do {
				if (a[i] == null){  // 삽입 위치 발견
					a[i] = key;     // key를 해시테이블에 저장
					d[i] = data;    // key관련 데이터를 동일한 인덱스하에 저장 
					return;
				}
				if (a[i].equals(key)) {  // 이미 key 존재
					d[i] = data;    // 데이터만 갱신
					return; 
				}            
				i = (initialpos + j) % M; // i = 다음 위치
				j=j+2;
			} while (i != initialpos); // 현재 i가 초기위치와 같게되면 루프 종료   
		}
		public void put(K key,V data) {
			int i = hash(key);
	        for (Node x = node[i]; x != null; x = x.next)
	              if (key.equals(x.key)) {  // 이미 key 존재
	                    x.data =  data;     // 데이터만 갱신
	                    return;
	              }
	        node[i] = new Node(key, data, node[i]); // 연결 리스트의 첫 노드로 삽입
		}
		
		public V Get(K key) {  // 탐색 연산
			int initialpos = hash(key);
			int i = initialpos, j = 2;
			while (a[i] != null) {  // a[i]가 empty가 아니면
				if (a[i].equals(key))
					return d[i];    // 탐색 성공
				i = (initialpos + j) % M; // i = 다음 위치
				j=j+2;
			
			}            
			return null;
		}
		public V Delete(int index) {
			int i = index-1;
			V temp = d[i];
			a[i]=null;
			d[i]=null;
			return temp;
		}
		public V delete(K key) {
			 int i = hash(key);
			 Node pre=null;
	         for (Node x = node[i]; x != null; x = x.next) {   // 연결리스트 탐색   
	        	 if (key.equals(x.key)) {
	            	   V temp = (V)x.data;
	            	   if(pre!=null) {
	            	   pre.setNext(x.next);
	            	   }else {
	            	   node[i]=null;
	            	   }
	            	   return temp;
	            	   }  // 탐색 성공
	        	 pre = x;
	         }
	         
	         return null;
		}
		public V get(K key) {
			 int i = hash(key);
	         for (Node x = node[i]; x != null; x = x.next)   // 연결리스트 탐색
	               if (key.equals(x.key)) return (V) x.data;  // 탐색 성공
	         return null;
		}
	}
	public static class CMember<K,V>{
		private K key;
		private V data;
		CMember(){
			
		}
		CMember(K key,V data){
			this.key=key;
			this.data=data;
		}
		public K getKey() {
			return key;
		}
		public V getValue() {
			return data;
		}
	}
		public static void main(String[] args){ 
			LinearProbing id = new HashTable();
			LinearProbing name = new HashTable();
			Chaining c =  new HashTable();
			CMember[] cms = {new CMember(25,"이예슬"),new CMember(37,"이장연"),new CMember(18,"전수영")
					,new CMember(55,"윤형찬"),new CMember(22,"안희동"),new CMember(35,"구희진")
					,new CMember(50,"박민정"),new CMember(63,"권구엽")};
			for(CMember cm : cms ) {
				id.Put(cm.getKey(), cm.getValue());
			}
			System.out.println("1.학번을 키로 하는 해시테이블에 저장된 내용");
			id.Print();
			System.out.println("2.학번을 키로 원소를 탐색한 결과:"+"63의 data는 "+id.Get(63)+" 25의 data는 "+id.Get(25));
			System.out.println("3.이름을 키로하는 해시테이블에 저장된 내용");
			for(CMember cm : cms ) {
				name.Put(cm.getValue(), cm.getKey());
			}
			name.Print();
			System.out.println("4.이름을 키로 원소를 삽입하고 삭제한 후에 해시테이블에 저장된 내용");
			name.Put("박민정",15);
			name.Delete(10);
			name.Print();
			
			for(CMember cm : cms ) {
				c.put(cm.getKey(), cm.getValue());
			}
			System.out.println("5.학번을 키로 하는 Chaining 해시테이블에 저장된 내용");
			c.print();
			System.out.println("6.학번 37과 55원소를 탐색한 결과: "+c.get(37)+"과 "+c.get(55));
			System.out.println("7.학번이 50인 원소를 삭제한 후의 해시테이블");
			c.delete(50);
			c.print();
			
      		}
}

[콘솔창 결과]
1.학번을 키로 하는 해시테이블에 저장된 내용
	 0	 1	 2	 3	 4	 5	 6	 7	 8	 9	10	11	12
	35	null	50	55	63	18	null	null	null	22	null	37	25
	구희진	null	박민정	윤형찬	권구엽	전수영	null	null	null	안희동	null	이장연	이예슬
2.학번을 키로 원소를 탐색한 결과:63의 data는 권구엽 25의 data는 이예슬
3.이름을 키로하는 해시테이블에 저장된 내용
	 0	 1	 2	 3	 4	 5	 6	 7	 8	 9	10	11	12
	null	구희진	전수영	null	이예슬	null	이장연	박민정	안희동	권구엽	null	null	윤형찬
	null	35	18	null	25	null	37	50	22	63	null	null	55
4.이름을 키로 원소를 삽입하고 삭제한 후에 해시테이블에 저장된 내용
	 0	 1	 2	 3	 4	 5	 6	 7	 8	 9	10	11	12
	null	구희진	전수영	null	이예슬	null	이장연	박민정	안희동	null	null	null	윤형찬
	null	35	18	null	25	null	37	15	22	null	null	null	55
5.학번을 키로 하는 Chaining 해시테이블에 저장된 내용
  0  1  2  3-->[55, 윤형찬]
  4  5-->[18, 전수영]
  6  7  8  9-->[35, 구희진]-->[22, 안희동]
 10 11-->[63, 권구엽]-->[50, 박민정]-->[37, 이장연]
 12-->[25, 이예슬]
6.학번 37과 55원소를 탐색한 결과: 이장연과 윤형찬
7.학번이 50인 원소를 삭제한 후의 해시테이블
  0  1  2  3-->[55, 윤형찬]
  4  5-->[18, 전수영]
  6  7  8  9-->[35, 구희진]-->[22, 안희동]
 10 11-->[63, 권구엽]-->[37, 이장연]
 12-->[25, 이예슬]

