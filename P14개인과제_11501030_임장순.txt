자료구조 P14개인과제 (1,2,3) 정보보호학과 11501030임장순
과제1번
[소스코드]
package P14_1;

import java.util.Scanner;

public class DAQSort {
	static class Quick{
		static int count=0;
		public static void sort(Comparable[] a) {
			count=0;
			sort(a,0,a.length-1);
		}
		private static void sort(Comparable[] a,int low, int high) {
			if(high <= low) return;
			int j = partition(a,low,high);
			sort(a,low,j-1);
			sort(a,j+1,high);
		}
		private static int partition(Comparable[] a, int pivot,int high) {
			int i=pivot+1;
			int j=high;
			Comparable p = a[pivot];
			while(true) {
				while(i<=high && !isless(p,a[i])) i++;
				while(j>=pivot && isless(p,a[j])) j--;
				if(i>=j) break;
				swap(a,i,j);
			}
			swap(a,pivot,j);
			return j;
		}
		private static boolean isless(Comparable u,Comparable v) {
			return (u.compareTo(v)>0);
		}
		private static void swap(Comparable[] a,int i,int j) {
			if(i!=j) count++;
			Comparable temp = a[i];
			a[i]=a[j];
			a[j]=temp;
		}
	}
	static class Merge{
		static int count=0;
		private static void merge(Comparable[] a, Comparable[] b, int low ,int mid,int high) {
			int i=low,j=mid+1;
			for(int k=low;k<=high;k++) {
				if(i>mid) {b[k] = a[j++];}
				else if(j>high) {b[k] = a[i++];}
				else if(isless(a[j],a[i])) {b[k] = a[j++];}
				else {b[k] = a[i++];}
				count++;
			}
			for(int k=low;k<=high;k++) a[k] = b[k];
		}
		private static void sort(Comparable[] a,Comparable[] b,int low,int high) {
			if(high <= low) return;
			int mid = low + (high - low) /2;
		   sort(a,b,low,mid);
			sort(a,b,mid+1,high);
			merge(a,b,low,mid,high);
		}
		public static void sort(Comparable[] a) {
			Comparable[] b = new Comparable[a.length];
			sort(a,b,0,a.length-1);
		}
		private static boolean isless(Comparable v,Comparable w){
			return (v.compareTo(w)<0);
		}
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println("정렬할 정수를 한 라인에 연속하여 입력하세요(숫자의 구분은 스페이스)");
		Scanner sc = new Scanner(System.in);
		String input = sc.nextLine();
	    String[] inputs = input.split(" ");
		Integer[] init = new Integer[inputs.length];
		Integer[] nums = new Integer[inputs.length];
		for(int i=0;i<inputs.length;i++) {
			init[i]=Integer.parseInt(inputs[i]);
		}
		nums = init.clone();
	    Merge.sort(nums);
		for(Integer num : nums)
		System.out.print("["+num+"] ");
		System.out.println("비교/이동횟수:"+Merge.count);
		System.out.println("합병정렬:오름차순 정렬입니다.");
		Integer[] nums2 = new Integer[inputs.length];
		nums2=init.clone();
		Quick.sort(nums2);
		for(Integer num : nums2)
		System.out.print("["+num+"] ");
		System.out.println("비교/이동횟수:"+Quick.count);
		System.out.println("퀵정렬:내림차순 정렬입니다.");
	}

}

[콘솔창 결과]
정렬할 정수를 한 라인에 연속하여 입력하세요(숫자의 구분은 스페이스)
123 234 345 12 467 907 8909 378 190
[12] [123] [190] [234] [345] [378] [467] [907] [8909] 비교/이동횟수:29
합병정렬:오름차순 정렬입니다.
[8909] [907] [467] [378] [345] [234] [190] [123] [12] 비교/이동횟수:10
퀵정렬:내림차순 정렬입니다.


과제2번

1)배열의 모든 원소를 2개씩 조합하여 차이가 최소인 조합을 구하는방법

2개씩 짝을 짓는방법은 다음과 같이 이중 포문을 사용하여특정클래스를 활용해 짝을 저장하고, 짝들을 순차리스트에 저장하고 if문을 활용해 저장시
큰수가 num1에 작은수가 num2에 저장되도록하고 큰수-작은수의 차이를 구해 result에 저장
그리고 Array리스트에 저장된 모든 짝클래스 인스턴스의 result값을 정렬한뒤 짝을 출력
최소힙을 구성하여 차례로 빼면서 정렬하고, 최소힙에서 우선순위 비교시 result(차)로 먼저비교하고
result가 같은경우 result2(합)을 비교함

EX) A = { 1, 2 , 3, 4}
for(int i=0;i<A.size-1;i++){
for(int j=i+1;j<A.size;j++){
Arraylist.add(짝클래스인스턴스.add(i,j))
}
}

class 짝클래스{
int num1;
int num2;
int result;
int result2;
...
public void add(int i,int j){
if(i>j){
num1=i;
num2=j;
result=i-j;
}else if(i<j){
num2=i;
num1=j;
result=j-i;
}else{
num1=i;
num2=j;
result=0;
}
result2=i+j;
}
}

2)배열을 정렬하면 이웃은 연속한 2개의 숫자의 차중에서 최소값임을 이용하는 방법

[소스코드]
package P14_2;

import java.util.Arrays;
import java.util.Collections;
import java.util.Scanner;

public class P14_2 {
 public static void main(String[] args){
	Scanner sc = new Scanner(System.in);
	String input = sc.nextLine();
	String[] inputs = input.split(" ");
		Integer[] arr = new Integer[inputs.length];
		for(int i=0;i<inputs.length;i++) {
			arr[i]=Integer.parseInt(inputs[i]);
		}
	 Arrays.sort(arr,Collections.reverseOrder());
	 int min=Integer.MAX_VALUE;
	 int max=Integer.MAX_VALUE;
	 int num1=0;
	 int num2=0;
	 for(int i=0;i<arr.length-1;i++) {
		 if(min>=(arr[i]-arr[i+1])) {
			 if(min==(arr[i]-arr[i+1])) {
				 min=max>(arr[i+1]+arr[i])?(arr[i]-arr[i+1]):min;
				 num1=arr[i+1];
				 num2=arr[i];
			 }else {
			 min=arr[i]-arr[i+1];
			 num1=arr[i+1];
			 num2=arr[i];
			 }
		 }
		 max=arr[i+1]+arr[i];
	 }
	System.out.println("이웃은 "+num1+" "+num2+"이고 거리는 "+min+"입니다.");
	
 }
}

[콘솔창 결과]
11 25 7 2 15 19 21 13 23
이웃은 11 13이고 거리는 2입니다.

[선택이유]
모든조합을 구하는 경우에서 시간적 비용이 추가 발생하며, 추가적으로 우선순위큐로 구성하고 모든조합에대한 차와
합을 바탕으로 우선순위를 비교할때 공간적 비용이 추가 발생하기때문에
2번에 비해서 1번은 시간,공간복잡도의 효율이 떨어지고, 2번이 구현이 비교적 쉬우므로 2번을 선택하였다.

과제3번
1)모든 조합을 최소힙과 최대힙으로 구성하여 최소값,최대값을 구하는 방법

2)각 숫자의 첫번째 오는 수를 기준으로 먼저 내림차순 정렬한후, 두번째 오는수를
기준으로 내림차순 정렬하는데, 1자리수의 경우 3이면 3,2이면 2로 가정하고 정렬함
그리고 정렬된 수(문자열)를 차례로 모두 연결한후 정수로 변환하는 방법

1번에 비해 시간,공간복잡도의 효율이 높아 2번안을 선택하였음

[소스코드]
package P14_3;

import java.util.Arrays;
import java.util.Comparator;
import java.util.Scanner;

public class P14_3 {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		String input = sc.nextLine();
		String[] inputs = input.split(" ");
		Arrays.sort(inputs, new Comparator<String>() {
			@Override
			public int compare(String o1, String o2) {
				// TODO Auto-generated method stub
				int num = o1.charAt(0)-'0';
				int num2 = o2.charAt(0)-'0';
				int rnum = Integer.parseInt(o1);
				int rnum2 = Integer.parseInt(o2);
				if(num>num2) {
					
					return 1;
				}else if(num<num2) {
            
                    return -1;
				}else {
					if(num==num2) {
						   if(rnum%10>rnum2%10) {
							   return 1;
						   }else if(rnum%10<rnum2%10) {
							   return -1;
						   }else {
							   return 0;
						   }
						}
				}
				return 0;
			}
		});
		System.out.print("최소값:");
		for(String s : inputs) {
			System.out.print(s);
		}
		System.out.println();
		Arrays.sort(inputs, new Comparator<String>() {
			@Override
			public int compare(String o1, String o2) {
				// TODO Auto-generated method stub
				int num = o1.charAt(0)-'0';
				int num2 = o2.charAt(0)-'0';
				int rnum = Integer.parseInt(o1);
				int rnum2 = Integer.parseInt(o2);
				if(num<num2) {
					
					return 1;
				}else if(num>num2) {
            
                    return -1;
				}else {
					if(num==num2) {
						   if(rnum%10<rnum2%10) {
							   return 1;
						   }else if(rnum%10>rnum2%10) {
							   return -1;
						   }else {
							   return 0;
						   }
						}
				}
				return 0;
			}
		});
		System.out.print("최대값:");
		for(String s : inputs) {
			System.out.print(s);
		}
		
	}
}


[콘솔창 결과]
2 9 10 21 24
최소값:10212249
최대값:92422110

