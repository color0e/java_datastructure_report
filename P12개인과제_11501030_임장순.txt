자료구조 P12개인과제 (Kruskal MST 1, Dijkstra Shortest Path) 정보보호학과 11501030임장순

*************과제 Kruskal MST 1 알고리즘의 구현***************

[소스코드]
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;


public class Kruskal1 {
	int N, M=0; 
	List<WEdge>[] adjList;
	List<WEdge>[] graph;
	int[][] weight;
	private WEdge[] tree;	
	private boolean[] visited;
	static class Weight_Comparison implements Comparator<WEdge> { 
		public int compare(WEdge e, WEdge f) {
			if(e.weight < f.weight)
				return 1;
			else if(e.weight > f.weight)
				return -1;		
			return 0;
		}		
	}
	/*
	 * Kruskal1(int[][] weight)
	 * 가중치를 저장하고있는 이차원 배열을 받아와 
	 * 그래프를 인접리스트로 구성하고 최소신장트리의 간선들을 저장하기위한 배열 초기화
	 */
	public Kruskal1(int[][] weight) {
		this.weight=weight;
		N = weight.length;
		adjList= new List[N];
		for(int i=0;i<weight.length;i++) {
			adjList[i] = new LinkedList<>();
			for(int j=0;j<weight.length;j++) {
				if(weight[i][j]!=0) {
					WEdge e = new WEdge(i,j,weight[i][j]);
					adjList[i].add(e);
					M++;
				}
			}
		}
		graph = adjList;
		tree = new WEdge[N-1];
	}
	
	/*
	 * WEdge[] mst()
	 * 크루스칼1 알고리즘의 핵심 메서드
	 * 간선의 가중치를 우선순위 키로 하는 최대힙을 구성하고,
	 * 가중치가 높은 간선객체를 하나씩 빼서, 인접리스트에서 해당 간선객체를 삭제하고,(삭제시 removeIf를 사용해서
	 * 매개변수로 전달된 단항조건자에 true를 반환하는 노드를 삭제)
	 * 삭제성공시, M(해당 프로그램에서는 무방향간선하나에 간선객체가 2개씩이므로 무방향간선 * 2)개에서 2개씩 감소시킴
	 * 그리고 여러개의 연결성분으로 구성되는경우 다시 붙이고, 2개씩 증가시킴
	 * 작업이 완료되면 2개씩 구성된 무방향간선을 하나씩 tree에 저장하고 반환
	 */
	public WEdge[] mst()	{  	
		Weight_Comparison BY_WEIGHT = new Weight_Comparison(); 	
		PriorityQueue<WEdge> pq = new PriorityQueue<WEdge>(M, BY_WEIGHT);
		for (int i = 0; i < N; i++){ 
			for (WEdge e : graph[i]){
				pq.add(e); 
			}
		}		
		int count = M;
		int count2=0;
		while (!pq.isEmpty() && count > 2*(N-1)) {
			WEdge e = pq.poll();          
			int u = e.vertex;            
			int v = e.adjvertex; 	     
			WEdge we1 = new WEdge(u,v,weight[u][v]);
			WEdge we2 = new WEdge(v,u,weight[v][u]);
		    if(graph[u].removeIf(i -> i.vertex==u && i.adjvertex==v) 
		    		&& graph[v].removeIf(i -> i.vertex==v && i.adjvertex==u)) {
				count=count-2;
			}
			if (!isConnected()) { 
				graph[u].add(we1);
				graph[v].add(we2);
				count=count+2;
			}
		}
		for(int k=0;k<graph.length;k++) {
			for(WEdge we : graph[k]) {
				if(we.adjvertex>k && count2<N-1) {
					tree[count2++]=we;
				}
			}
		}
		return tree;
	}
	
	/*
	 * boolean isConnected()
	 * 모든노드가 하나의 연결성분으로 구성되어있는지 확인하기위한 메서드
	 */
	private boolean isConnected() {
		visited = new boolean[N];
		dfs(0);
		for(int i=0;i<visited.length;i++) {
			if(visited[i]==false) {
				return false;
			}
		}
		return true;
	}
	
	/*
	 * void dfs(int i)
	 * 최소신장트리란 하나의 연결성분으로 이루어진 "무"방향 가중치 그래프에서
	 * 간선의 가중치의 합이 최소인신장 트리로써 임의의노드 0부터 시작하여 깊이우선탐색을 수행하면
	 * (단, 임의의노드 0부터 시작했다고하면 더이상 다른노드부터 DFS를 시작하는 일이 있어서는 아니됨) 
	 * 무방향그래프의 특성상 하나의 연결성분의 모든 노드를 탐색할수있다.
	 * 따라서 기존의 노드를 모두 방문하지 못할경우 하나의 성분이 여러성분으로 분리된것으로 간주 
	 */
	private void dfs(int i) {
		visited[i]=true;
		for(WEdge e:graph[i]) {
			if(!visited[e.adjvertex]) {
				dfs(e.adjvertex);
			}
		}
	}
	public void adlistPrint() {
		for (int i = 0; i < N; i++) {
			System.out.print(i+":  ");
			for(WEdge we : adjList[i]) {
				System.out.print(we.adjvertex+", ");
			}
			System.out.println();
		}
	}
	public static class WEdge {
		int vertex, adjvertex; 
		int weight;            
		
		public WEdge(int v, int wt) {
			adjvertex = v;  weight    = wt;
		}
		
		public WEdge(int u, int v, int wt) {
			vertex    = u;  adjvertex = v;  weight    = wt;
		}
	}
	public static void main(String[] args) {
		System.out.println("*** Kruskal1 MST알고리즘을 사용하여 MST구성 ***");
		int[][] weight = {  
				{  0,  9, 10,  0, 0, 0, 0},
				{  9,  0,  0 ,10, 5, 0, 3}, 
				{ 10,  0,  0,  9, 7, 2, 0}, 
				{  0, 10,  9,  0, 0, 4, 8}, 
				{  0,  5,  7,  0, 0, 0, 1}, 
				{  0,  0,  2,  4, 0, 0, 6}, 
				{  0,  3,  0,  8, 1, 6, 0}, 
		};
		Kruskal1 k = new Kruskal1(weight);
		System.out.println();
		System.out.println("[입력 그래프의 Adjcency Lists]:");
		k.adlistPrint();
		System.out.println();
		WEdge[] tree = k.mst();
		System.out.print("[최소신장트리 간선]:");
		int sum=0;
		for (int i = 0; i < tree.length; i++) {
			System.out.print("("+tree[i].vertex + "," +tree[i].adjvertex+ ") ");
			sum += tree[i].weight;
		}
		System.out.println();
		System.out.println();
		System.out.println("[최소신장트리의 간선가중치 합]:"+sum);
	}


}


[콘솔창 결과]
*** Kruskal1 MST알고리즘을 사용하여 MST구성 ***

[입력 그래프의 Adjcency Lists]:
0:  1, 2, 
1:  0, 3, 4, 6, 
2:  0, 3, 4, 5, 
3:  1, 2, 5, 6, 
4:  1, 2, 6, 
5:  2, 3, 6, 
6:  1, 3, 4, 5, 

[최소신장트리 간선]:(0,1) (1,6) (2,5) (3,5) (4,6) (5,6) 

[최소신장트리의 간선가중치 합]:25



**************과제 Dijkstra Shortest Path 알고리즘의 구현******************

[소스코드]
import java.util.LinkedList;
import java.util.List;

public class DijkstraSP {
	public int N;
	List<WEdge>[] graph;
	public int[] previous;
	public DijkstraSP(List<WEdge>[] adjList) {
		N= adjList.length;
		previous = new int[N];
		graph=adjList;
	}
	public int[] shortestPath(int s) {
		boolean[] visited = new boolean[N];
		int[] D = new int[N];
		for(int i=0;i<N;i++) {
			visited[i]=false;
			previous[i] = -1;
			D[i] = Integer.MAX_VALUE;
		}
		previous[s] = 0;
		D[s] = 0;
		for(int k=0;k<N;k++) {
			int minVertex = -1;
			int min = Integer.MAX_VALUE;
			for(int j=0;j<N;j++) {
				if((!visited[j])&& (D[j]<min)) {
					min = D[j];
					minVertex = j;
				}
			}
			visited[minVertex] =true;
			for(WEdge e : graph[minVertex]) {
				if(!visited[e.adjvertex]) {
					int currentDist = D[e.adjvertex];
					int newDist = D[minVertex] +e.weight;
					if(newDist < currentDist) {
						D[e.adjvertex] = newDist;
						previous[e.adjvertex] = minVertex;
					}
				}
				
			}
		}
		return D;
	}
	public static class WEdge {
		int vertex, adjvertex; 
		int weight;            
		
		public WEdge(int v, int wt) {
			adjvertex = v;  weight    = wt;
		}
		
		public WEdge(int u, int v, int wt) {
			vertex    = u;  adjvertex = v;  weight    = wt;
		}
	}
	public static void main(String[] args) {
		int[][] weight = {
				{0,1,0,2,0,0,0,0},
				{1,0,4,3,1,6,0,0},
				{0,4,0,0,0,1,1,2},
				{2,3,0,0,5,0,0,0},
				{0,1,0,5,0,0,2,0},
				{0,6,1,0,0,0,0,9},
				{0,0,1,0,2,0,0,1},
				{0,0,2,0,0,9,1,0}
		};
		int N = weight.length;
		List<WEdge>[] adjList = new List[N];
		for(int i=0;i<N;i++) {
			adjList[i]=new LinkedList<>();
			for(int j=0;j<N;j++) {
				if(weight[i][j]!=0) {
					WEdge we = new WEdge(i,j,weight[i][j]);
					adjList[i].add(we);
				}
			}
		}
		System.out.println("입력그래프의 Adjcency Lists");
		for(int i=0;i<adjList.length;i++) {
			System.out.print(i+":");
			for(WEdge we : adjList[i]) {
				System.out.print(we.adjvertex+",");
			}
			System.out.println();
		}
		DijkstraSP d = new DijkstraSP(adjList);
		System.out.println();
		System.out.println("정점 0으로부터의 최단거리");
		int[] dist = d.shortestPath(0);
		for(int i=0;i<dist.length;i++) {
			if(dist[i] == Integer.MAX_VALUE)
			System.out.println("0과 "+i+" 사이에 경로없음");
			else
				System.out.println("[0,"+i+"]="+dist[i]);
		}
		System.out.println();
		System.out.println("점 0으로 부터의 최단경로");
		for(int i=1;i<d.N;i++) {
			int back=i;
			System.out.print(back);
			while(back!=0) {
				System.out.print("<="+d.previous[back]);
				back = d.previous[back];
			}
			System.out.println();
		}
	}
}
[콘솔창 결과]
입력그래프의 Adjcency Lists
0:1,3,
1:0,2,3,4,5,
2:1,5,6,7,
3:0,1,4,
4:1,3,6,
5:1,2,7,
6:2,4,7,
7:2,5,6,

정점 0으로부터의 최단거리
[0,0]=0
[0,1]=1
[0,2]=5
[0,3]=2
[0,4]=2
[0,5]=6
[0,6]=4
[0,7]=5

점 0으로 부터의 최단경로
1<=0
2<=1<=0
3<=0
4<=1<=0
5<=2<=1<=0
6<=4<=1<=0
7<=6<=4<=1<=0
