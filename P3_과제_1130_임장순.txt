자료구조 P3 과제 (2,3)

2번 이중 연결리스트의 구현과 응용

[소스코드]
package dlist;

import java.util.NoSuchElementException;

//jangsoon doublylinked list
public class Jsdlist<T>{
	Node head,tail;
	int size;
	Jsdlist(){
		head = new Node(null,null,null);
		tail = new Node(null,head,null);
		head.setNext(tail);
		size = 0;
	}
	public int size() { return size;}
	public boolean isEmpty() {return size==0;}
	
	//Node Class
	static class Node<T>{
		private T item;
		private Node previous;
		private Node next;
		
		public Node(T item,Node previous,Node next){
			this.item=item;
			this.previous = previous;
			this.next = next;
		}
		public T getItem() {return item;}
		public Node getPrevious() { return previous; }
		public Node getNext() { return next; }
		public void setItem(T newItem) {this.item = newItem;}
		public void setPrevious(Node previous) {this.previous = previous;}
		public void setNext(Node next) {this.next = next;}
	}
	//Node class END
	static class Human{
		String name;
		int num;		
	}
	static class Student extends Human{
		Student(String name,int num){
			this.name = name;
			this.num = num;
		}
	}
	/*
	 * static class Professor extends Human{}
	 * static class Faculty extends Human{}
	 */
	public void insertFirst(T item) {
		Node temp = head.getNext();
		head.setNext(new Node(item,head,temp));
		temp.setPrevious(head.getNext());
		size++;
	}
	public void insertLast(T item) {
		Node temp = tail.getPrevious();
		tail.setPrevious(new Node(item,temp,tail));
		temp.setNext(tail.getPrevious());
		size++;
	}
	
	public void insertBefore(Node node,T newItem) {
		Node temp = node.previous;
		Node newNode = new Node(newItem,temp,node);
		node.setPrevious(newNode);
		temp.setNext(newNode);
		size++;
		
	}
	public void insert(int index,T newItem) {
		int count=0;
		if(size > index) {
			for(Node p = head.getNext();p!=tail;p=p.getNext()) {
				if(count+1 == index) {
					Node temp = p.getNext();
					p.setNext(new Node(newItem,p,temp));
					temp.setPrevious(p.getNext());
					size++;
				}
				count++;
			}
		}
		else {
		   System.out.println("불가능");	
		}
	}
	
	public void insertAfter(Node node,T newItem) {
		Node temp = node.getNext();
		Node newNode = new Node(newItem,node,temp);
		if(temp == null) tail.setPrevious(newNode);
		temp.setPrevious(newNode);
		node.setNext(newNode);
		size++;
	}
	public void delete(Node x) {
		if(x==null) throw new NoSuchElementException();
		Node f = x.getPrevious();
		Node r = x.getNext();
		if(r==null) tail.setPrevious(f);
		f.setNext(r);
		r.setPrevious(f);
		x.setPrevious(null);
		x.setNext(null);
		size--;
	}
	public Node search_node(String name){
		for (Node<Human> p = head.getNext(); p!=tail; p=p.getNext()) {
			if(p.getItem().name.equals(name)) {
				return p;
			}
		}
		return null;
	}
	public void print() {
		if(size > 0)
			for (Node<Human> p = head.getNext(); p!=tail; p=p.getNext())
				System.out.print("["+p.getItem().name+" "+p.getItem().num+"]"+"\t ");
		else
			System.out.println("리스트 비어있음");
		System.out.println();
	}
	public void reverse_print() {
		for (Node<Human> p = tail.getPrevious(); p!=head; p=p.getPrevious())
			System.out.print("["+p.getItem().name+" "+p.getItem().num+"]"+"\t ");
		
		System.out.println();
	}
	
	public static void main(String[] args) {
		Jsdlist<Student> dlist = new Jsdlist<Student>();
		dlist.insertFirst(new Student("최학준",81027));
		dlist.insertAfter(dlist.head.getNext(), new Student("염정빈",81016));
		dlist.insertBefore(dlist.tail, new Student("이조연",81078));
		dlist.insertAfter(dlist.tail.getPrevious(), new Student("강홍규",81001));
		dlist.print();
		dlist.insertFirst(new Student("알도사",11616));
		dlist.print();
		dlist.insert(2,new Student("향단이",16611));
		dlist.print();
		dlist.delete(dlist.tail.getPrevious());
		dlist.insertLast(new Student("암행어사",10001));
		dlist.print();
		dlist.reverse_print();
		dlist.delete(dlist.head.getNext());
                            dlist.print();
		dlist.delete(dlist.tail.getPrevious());
		dlist.print();
                            dlist.delete(dlist.search_node("향단이"));
		dlist.print();
	}
}
[콘솔창 결과]
[최학준 81027]	 [염정빈 81016]	 [이조연 81078]	 [강홍규 81001]	 
[알도사 11616]	 [최학준 81027]	 [염정빈 81016]	 [이조연 81078]	 [강홍규 81001]	 
[알도사 11616]	 [최학준 81027]	 [향단이 16611]	 [염정빈 81016]	 [이조연 81078]	 [강홍규 81001]	 
[알도사 11616]	 [최학준 81027]	 [향단이 16611]	 [염정빈 81016]	 [이조연 81078]	 [암행어사 10001]	 
[암행어사 10001]	 [이조연 81078]	 [염정빈 81016]	 [향단이 16611]	 [최학준 81027]	 [알도사 11616]	 
[최학준 81027]	 [염정빈 81016]	 [이조연 81078]	 

3번 Java LinkedList<E>의 활용 (java.util.LinkedList 사용)

[소스코드]
import java.util.LinkedList;
import java.util.ListIterator;

public class Jnode<T> {
	private T item;
	public Jnode(T item){
		this.item=item;
	}
	public T getItem() {
		return item;
	}
	static class Student{
		String name;
		int num;
		Student(String name,int num){
			this.name=name;
			this.num=num;
		}
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		LinkedList<Jnode> li = new LinkedList<Jnode>();
		ListIterator<Jnode> iter;
		Jnode<Student> jnode;
		Student student;
		li.add(new Jnode(new Student("월매",15515)));
		li.add(new Jnode(new Student("성춘향",15113)));
		li.add(new Jnode(new Student("변사또",15611)));
		li.add(new Jnode(new Student("이도령",15212)));
		li.add(new Jnode(new Student("방자",15314)));
		iter = li.listIterator();
		
		while(iter.hasNext()) {
			jnode = iter.next();
			student = jnode.getItem();
			System.out.print("["+student.name+" "+student.num+"] ");
		}
		
		System.out.println();
		li.add(2, new Jnode(new Student("알도사",11616)));
		for(int i=0;i<li.size();i++) {
			jnode = li.get(i);
			student = jnode.getItem();
			if(student.name.equals("이도령")) {
				li.add(i+1, new Jnode(new Student("향단이",16611)));
				break;
			}
		}
		
		iter = li.listIterator();
		while(iter.hasNext()) {
			jnode = iter.next();
			student = jnode.getItem();
			System.out.print("["+student.name+" "+student.num+"] ");
		}
		System.out.println();
		li.removeFirst();
		li.removeLast();
		iter = li.listIterator();
		while(iter.hasNext()) {
			jnode = iter.next();
			student = jnode.getItem();
			System.out.print("["+student.name+" "+student.num+"] ");
		}
		System.out.println();
		while(iter.hasPrevious()) {
			jnode = iter.previous();
			student = jnode.getItem();
			System.out.print("["+student.name+" "+student.num+"] ");
		}
		System.out.println();
		
	}

}

[콘솔창 결과]
[월매 15515] [성춘향 15113] [변사또 15611] [이도령 15212] [방자 15314] 
[월매 15515] [성춘향 15113] [알도사 11616] [변사또 15611] [이도령 15212] [향단이 16611] [방자 15314] 
[성춘향 15113] [알도사 11616] [변사또 15611] [이도령 15212] [향단이 16611] 
[향단이 16611] [이도령 15212] [변사또 15611] [알도사 11616] [성춘향 15113] 


